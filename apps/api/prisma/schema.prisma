generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Plan {
  Free
  Premium
}

enum TripStyle {
  Relaxed
  Balanced
  Packed
}

enum TripItemType {
  Flight
  Hotel
  Activity
  Dining
  Note
}

enum OfferType {
  Flight
  Hotel
  Activity
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  imageUrl  String?
  role      Role     @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      AuthAccount[]
  sessions      Session[]
  subscription  Subscription?
  preferences   Preference?
  trips         Trip[]
  priceAlerts   PriceAlert[]
}

model AuthAccount {
  id         String   @id @default(cuid())
  userId     String
  provider   String
  providerId String
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  @@index([provider, providerId])
}

model Session {
  id               String   @id @default(cuid())
  userId           String
  refreshTokenHash String
  userAgent        String?
  ip               String?
  expiresAt        DateTime
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  @@index([userId])
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeCustomerId String?
  stripeSubId      String?
  plan             Plan     @default(Free)
  status           String?
  currentPeriodEnd DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Preference {
  id              String   @id @default(cuid())
  userId          String   @unique
  hotelMinStars   Int?     @default(3)
  hotelMaxPrice   Int?
  likesMuseums    Boolean? @default(true)
  dislikesNightlife Boolean? @default(false)
  cuisinePrefs    Json?

  user User @relation(fields: [userId], references: [id])
}

model Trip {
  id                 String   @id @default(cuid())
  userId             String
  title              String
  origin             String?
  destinations       Json
  startDate          DateTime
  endDate            DateTime
  budgetMin          Int?
  budgetMax          Int?
  travelers          Int      @default(1)
  style              TripStyle @default(Balanced)
  notes              String?
  isPublic           Boolean   @default(false)
  publicSlug         String?   @unique
  premiumWatermarkOff Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user        User       @relation(fields: [userId], references: [id])
  days        TripDay[]
  offers      ProviderOffer[]
  priceAlerts PriceAlert[]

  @@index([userId])
  @@index([publicSlug])
}

model TripDay {
  id      String   @id @default(cuid())
  tripId  String
  date    DateTime
  summary String?

  trip   Trip      @relation(fields: [tripId], references: [id])
  items  TripItem[]
  @@index([tripId])
}

model TripItem {
  id        String       @id @default(cuid())
  tripDayId String
  type      TripItemType
  title     String
  startTime DateTime?
  endTime   DateTime?
  address   String?
  lat       Float?
  lng       Float?
  details   Json?
  linkUrl   String?
  provider  String?
  priceMinor Int?
  currency   String?
  rating     Float?
  createdAt DateTime @default(now())

  day TripDay @relation(fields: [tripDayId], references: [id])
  @@index([tripDayId])
}

model ProviderOffer {
  id           String    @id @default(cuid())
  tripId       String
  type         OfferType
  provider     String
  offerRaw     Json
  deeplinkUrl  String?
  affiliateTag String?
  priceMinor   Int?
  currency     String?
  checkIn      DateTime?
  checkOut     DateTime?
  createdAt    DateTime @default(now())

  trip Trip @relation(fields: [tripId], references: [id])
  @@index([tripId, type])
}

model PriceAlert {
  id            String   @id @default(cuid())
  userId        String
  tripId        String
  type          OfferType
  queryHash     String
  params        Json
  thresholdMinor Int
  currency      String
  isActive      Boolean  @default(true)
  lastCheckedAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  trip Trip @relation(fields: [tripId], references: [id])
  checks AlertCheck[]

  @@index([userId, isActive])
}

model AlertCheck {
  id           String   @id @default(cuid())
  alertId      String
  status       String
  foundBetter  Boolean  @default(false)
  oldPriceMinor Int?
  newPriceMinor Int?
  details      Json?
  createdAt    DateTime @default(now())

  alert PriceAlert @relation(fields: [alertId], references: [id])
  @@index([alertId])
}

model ApiCache {
  id        String   @id @default(cuid())
  provider  String
  keyHash   String
  payload   Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([provider, keyHash])
  @@unique([provider, keyHash], name: "provider_keyHash")
}

model WebhookEvent {
  id          String   @id @default(cuid())
  source      String
  raw         Json
  processedAt DateTime?
  createdAt   DateTime @default(now())
}

